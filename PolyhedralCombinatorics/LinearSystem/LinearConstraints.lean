import PolyhedralCombinatorics.LinearSystem.Basic

inductive LinearConstraint.Comparator | le | eq | ge

variable
  (ùîΩ : Type*) [LinearOrderedField ùîΩ] -- Field type
  (n : ‚Ñï) -- Dimension of the space

/-- `LinearConstraint n` is the type of linear constraints on `n` variables. -/
structure LinearConstraint where
  coefficients : Fin n ‚Üí ùîΩ
  comparator : LinearConstraint.Comparator
  rhs : ùîΩ

variable {ùîΩ n} {y : Fin n ‚Üí ùîΩ} {b : ùîΩ}

namespace LinearConstraint
open Matrix

/-- Converts a linear constraint into a list o extended matrix rows for a
  linear system. -/
def toExtendedRows : LinearConstraint ùîΩ n ‚Üí List ((Fin n ‚Üí ùîΩ) √ó ùîΩ)
| ‚ü®y, .le, b‚ü© => [(y, b)]
| ‚ü®y, .eq, b‚ü© => [(y, b), (-y, -b)]
| ‚ü®y, .ge, b‚ü© => [(-y, -b)]

@[simp] lemma le_toExtendedRows : toExtendedRows ‚ü®y, .le, b‚ü© = [(y, b)] := rfl
@[simp] lemma eq_toExtendedRows : toExtendedRows ‚ü®y, .eq, b‚ü© = [(y, b), (-y, -b)] := rfl
@[simp] lemma ge_toExtendedRows : toExtendedRows ‚ü®y, .ge, b‚ü© = [(-y, -b)] := rfl

/-- Whether a linear constraint is valid for a given vector. -/
def valid : LinearConstraint ùîΩ n ‚Üí (Fin n ‚Üí ùîΩ) ‚Üí Prop
| ‚ü®y, cmp, b‚ü©, x =>
  let p := y ‚¨ù·µ• x
  match cmp with | .le => p ‚â§ b | .eq => p = b | .ge => p ‚â• b

@[simp] lemma le_valid : valid ‚ü®y, Comparator.le, b‚ü© x = (y ‚¨ù·µ• x ‚â§ b) := rfl
@[simp] lemma eq_valid : valid ‚ü®y, Comparator.eq, b‚ü© x = (y ‚¨ù·µ• x = b) := rfl
@[simp] lemma ge_valid : valid ‚ü®y, Comparator.ge, b‚ü© x = (y ‚¨ù·µ• x ‚â• b) := rfl

lemma eq_valid_iff
  : valid ‚ü®y, Comparator.eq, b‚ü© x
    ‚Üî valid ‚ü®y, Comparator.le, b‚ü© x ‚àß valid ‚ü®y, Comparator.ge, b‚ü© x := by simp [le_antisymm_iff]

end LinearConstraint

namespace LinearSystem

open LinearConstraint

/-- Constructs a polyhedron description from a list of linear constraints. -/
def ofConstraints (cs : List (LinearConstraint ùîΩ n)) : LinearSystem ùîΩ n :=
  let rows := cs.bind toExtendedRows
  ‚ü®rows.length, Matrix.of (Prod.fst ‚àò rows.get), Prod.snd ‚àò rows.get‚ü©

section toSet_ofConstraints
open Matrix LinearConstraint

variable {cs : List (LinearConstraint ùîΩ n)} {y : Fin n ‚Üí ùîΩ} {b : ùîΩ}

@[simp]
lemma ofConstraints_mat_apply : (ofConstraints cs).mat i = (cs.bind toExtendedRows)[i].1 := rfl

@[simp]
lemma ofConstraints_vec_apply : (ofConstraints cs).vec i = (cs.bind toExtendedRows)[i].2 := rfl

@[simp] lemma ofConstraints_apply_eq_lemma
  : let s := ofConstraints cs
    s.mat i = y ‚àß s.vec i = b ‚Üî (cs.bind toExtendedRows)[i] = (y, b) := by
  simp only [ofConstraints_mat_apply, ofConstraints_vec_apply]
  apply Prod.mk.inj_iff.symm

macro "constraint_lemma_tac" h:ident : tactic =>
  `(tactic|
    simp_rw [ofConstraints_apply_eq_lemma]
    <;> exact List.mem_iff_get.mp $ List.mem_bind.mpr ‚ü®_, $h, by simp [toExtendedRows]‚ü©)

private lemma le_lemma (h : ‚ü®y, Comparator.le, b‚ü© ‚àà cs)
  : let s := ofConstraints cs; ‚àÉ i, s.mat i = y ‚àß s.vec i = b := by
  constraint_lemma_tac h

private lemma ge_lemma (h : ‚ü®y, Comparator.ge, b‚ü© ‚àà cs)
  : let s := ofConstraints cs; ‚àÉ i, -(s.mat i) = y ‚àß -(s.vec i) = b := by
  simp_rw [neg_eq_iff_eq_neg]
  constraint_lemma_tac h

private lemma eq_lemma (h : ‚ü®y, Comparator.eq, b‚ü© ‚àà cs)
  : let s := ofConstraints cs;
    (‚àÉ i, s.mat i = y ‚àß s.vec i = b) ‚àß (‚àÉ i, -(s.mat i) = y ‚àß -(s.vec i) = b) := by
  simp_rw [neg_eq_iff_eq_neg]
  constructor <;> constraint_lemma_tac h

theorem mem_toSet_ofConstraints (x : Fin n ‚Üí ùîΩ)
  : x ‚àà (ofConstraints cs).toSet ‚Üî ‚àÄ c ‚àà cs, c.valid x := by
  let rows := cs.bind toExtendedRows
  constructor
  . show x ‚àà (ofConstraints cs).toSet ‚Üí ‚àÄ c ‚àà cs, c.valid _
    intro h ‚ü®y, cmp, b‚ü© mem_cs
    cases cmp
    case' le => have ‚ü®_, hy, hb‚ü© := le_lemma mem_cs
    case' ge => have ‚ü®_, hy, hb‚ü© := ge_lemma mem_cs
    case' eq =>
      rw [eq_valid_iff]
      constructor
      case' left => have ‚ü®_, hy, hb‚ü© := (eq_lemma mem_cs).1
      case' right => have ‚ü®_, hy, hb‚ü© := (eq_lemma mem_cs).2
    all_goals subst hy hb
    case le | eq.left =>
      apply h
    case ge | eq.right =>
      simp_rw [valid, neg_dotProduct, neg_le_neg_iff]
      apply h
  . show (‚àÄ c ‚àà cs, c.valid x) ‚Üí ‚àÄ (i : Fin rows.length), rows[i].1 ‚¨ù·µ• _ ‚â§ rows[i].2
    intro h i
    have : rows[i] ‚àà rows := by apply List.get_mem
    have ‚ü®‚ü®y, cmp, b‚ü©, mem_cs, h'‚ü© := List.mem_bind.mp this
    have := h _ mem_cs
    cases cmp <;> (
      simp_all only [toExtendedRows, valid, List.mem_singleton, List.mem_pair]
      try cases h'
      all_goals simp_all only [neg_dotProduct, neg_le_neg_iff, le_refl]
    )

theorem toSet_ofConstraints
  : (ofConstraints cs).toSet = { x : Fin n ‚Üí ùîΩ | ‚àÄ c ‚àà cs, c.valid x } :=
  Set.ext_iff.mpr mem_toSet_ofConstraints

end toSet_ofConstraints

end LinearSystem
