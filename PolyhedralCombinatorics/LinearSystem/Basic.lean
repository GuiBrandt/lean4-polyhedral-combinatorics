import PolyhedralCombinatorics.LinearSystem.Defs

import Mathlib.Analysis.Convex.Basic

/-!
# Theorems about linear systems

This file contains theorems about linear systems.

## Main results

* `LinearSystem.solutions_concat`: Characterizes the set of solutions of the
  concatenation of two linear systems.
* `LinearSystem.solutions_convex`: The set of solutions of a linear system is convex.
-/

namespace LinearSystem
open Matrix

variable {ùîΩ n} [LinearOrderedField ùîΩ] (p q : LinearSystem ùîΩ n)

open Matrix

@[simp] lemma mem_solutions : x ‚àà p.solutions ‚Üî p.mat *·µ• x ‚â§ p.vec := Set.mem_setOf

@[simp] lemma mem_solutions_of {x : Fin n ‚Üí ùîΩ} : x ‚àà (of A b).solutions ‚Üî A *·µ• x ‚â§ b := Set.mem_setOf

/-- The set of solutions of the concatenation of two linear systems is the intersection of their
  sets of solutions. -/
@[simp] theorem solutions_concat : (p.concat q).solutions = p.solutions ‚à© q.solutions := by
  simp_rw [Set.ext_iff, Set.mem_inter_iff]
  intro x
  constructor <;> intro h
  . simp_rw [concat, mem_solutions, Pi.le_def] at h
    constructor <;> (rw [mem_solutions, Pi.le_def]; intro i)
    . have := h (i.castLE $ Nat.le_add_right ..)
      simp_all [mulVec]
    . have := h ‚ü®p.m + i, Nat.add_lt_add_left i.prop ..‚ü©
      simp_all [mulVec]
  . simp_rw [concat, mem_solutions, Pi.le_def]
    intro i
    by_cases hi : i < p.m <;> simp only [hi, mulVec, ‚ÜìreduceDIte, of_apply]
    . apply h.1
    . apply h.2

/-- The set of solutions of a linear system is convex. -/
theorem solutions_convex : Convex ùîΩ p.solutions := by
  intro x x_mem_p y y_mem_p Œ± Œ≤ Œ±_nonneg Œ≤_nonneg Œ±Œ≤_affine
  calc
    p.mat *·µ• (Œ± ‚Ä¢ x + Œ≤ ‚Ä¢ y) = Œ± ‚Ä¢ p.mat *·µ• x + Œ≤ ‚Ä¢ p.mat *·µ• y := by
      simp_rw [mulVec_add, mulVec_smul]
    _ ‚â§ Œ± ‚Ä¢ p.vec + Œ≤ ‚Ä¢ p.vec :=
      add_le_add
        (smul_le_smul_of_nonneg_left x_mem_p Œ±_nonneg)
        (smul_le_smul_of_nonneg_left y_mem_p Œ≤_nonneg)
    _ = p.vec := by rw [‚Üêadd_smul, Œ±Œ≤_affine, one_smul]
